for (i in y){
final_result <- paste(final_result, substring(train_letters_string, i, i))
}
print(final_result)
train_letters <- load_train_letter('HMM/courier-train.png')
test_letters <- load_test_letter('HMM/test-5-0.png')
noise <- 0.4
train_char_numbers <- length(train_letters)
test_char_numbers <- length(test_letters)
emissions <- matrix(0, train_char_numbers, test_char_numbers)
train_letters_string <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
train_letters_split <- strsplit(train_letters_string, "")[[1]]
counter <- 0
for (letter in train_letters_split){
for (test_char_index in 1:test_char_numbers){
tmp_train <- as.matrix(train_letters[letter])
tmp_train <- tmp_train[[1]]
if ( (dim(tmp_train)[2]) > 14 ){tmp_train <- tmp_train[, -15]}
dim(tmp_train) <- c(25, 14)
train_char_value <- tmp_train
tmp_observation <- test_letters[test_char_index]
tmp_observation <- tmp_observation[[1]]
if ( (dim(tmp_observation)[2]) > 14 ){tmp_observation <- tmp_observation[, -15]}
dim(tmp_observation) <- c(25, 14)
observation <- tmp_observation
missmatch <- 0
match <- 0
for (row in 1:25){
for (column in 1:14){
if (train_char_value[row, column] == observation[row, column]){
match <- match + 1
} else {missmatch <- missmatch + 1}
}
}
emissions[(unlist(gregexpr(pattern =letter, train_letters_string))), test_char_index] <- (`^`(1-noise,match)) * (`^`(noise,missmatch))
}
}
library(ramify)
init <- initial
emis <- emissions
obs <- test_letters
row <- lenght_train_letter
cols <- length(obs)
print(cols)
y = rep(0, cols)
temp_results <- matrix(0, row, cols)
for (i in 0:cols){
for (j in 0:row){
temp_results[j, i] = emis[j, i]
}
}
y = argmax(temp_results, rows = F)
final_result <- c()
for (i in y){
final_result <- paste(final_result, substring(train_letters_string, i, i))
}
print(final_result)
train_letters <- load_train_letter('HMM/courier-train.png')
test_letters <- load_test_letter('HMM/test-6-0.png')
noise <- 0.4
train_char_numbers <- length(train_letters)
test_char_numbers <- length(test_letters)
emissions <- matrix(0, train_char_numbers, test_char_numbers)
train_letters_string <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
train_letters_split <- strsplit(train_letters_string, "")[[1]]
counter <- 0
for (letter in train_letters_split){
for (test_char_index in 1:test_char_numbers){
tmp_train <- as.matrix(train_letters[letter])
tmp_train <- tmp_train[[1]]
if ( (dim(tmp_train)[2]) > 14 ){tmp_train <- tmp_train[, -15]}
dim(tmp_train) <- c(25, 14)
train_char_value <- tmp_train
tmp_observation <- test_letters[test_char_index]
tmp_observation <- tmp_observation[[1]]
if ( (dim(tmp_observation)[2]) > 14 ){tmp_observation <- tmp_observation[, -15]}
dim(tmp_observation) <- c(25, 14)
observation <- tmp_observation
missmatch <- 0
match <- 0
for (row in 1:25){
for (column in 1:14){
if (train_char_value[row, column] == observation[row, column]){
match <- match + 1
} else {missmatch <- missmatch + 1}
}
}
emissions[(unlist(gregexpr(pattern =letter, train_letters_string))), test_char_index] <- (`^`(1-noise,match)) * (`^`(noise,missmatch))
}
}
library(ramify)
init <- initial
emis <- emissions
obs <- test_letters
row <- lenght_train_letter
cols <- length(obs)
print(cols)
y = rep(0, cols)
temp_results <- matrix(0, row, cols)
for (i in 0:cols){
for (j in 0:row){
temp_results[j, i] = emis[j, i]
}
}
y = argmax(temp_results, rows = F)
final_result <- c()
for (i in y){
final_result <- paste(final_result, substring(train_letters_string, i, i))
}
print(final_result)
library(imager)
char_width <- 14
char_height <- 25
train_letters <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
load_train_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
names(result) <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j",
"k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3",
"4","5","6","7","8","9", " ")
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_train_letter('HMM/courier-train.png')
#result[69]
library(imager)
char_width <- 14
char_height <- 25
train_letters <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
load_train_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
names(result) <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j",
"k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3",
"4","5","6","7","8","9", " ")
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_train_letter('HMM/courier-train.png')
#result[69]
load_test_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_test_letter('HMM/test-1-0.png')
#result
library(readr)
fileName <- "HMM/12345.txt"
lines <- readLines(paste(fileName, sep = ""))
temp_file = rep()
temp_word = rep()
for (line in lines) {
line_words <- strsplit(line, split=" ")
for (word in line_words){
temp_word <- c(temp_word, word)
}
line_letter <- strsplit(line, split="")
for (letter in line_letter){
temp_file <- c(temp_file, letter)
}
}
##############
lenght_train_letter <- nchar(train_letters)
temp_init <- rep(0, lenght_train_letter)
for (i in 1:lenght_train_letter){
for (word in temp_word){
if ( substring(train_letters, i, i) == substring(word, 1, 1)){temp_init[i] = temp_init[i] + 1}
}
}
##############
initial <- rep()
for (i in temp_init){
tmp <- (i+1) / (length(temp_word) + 2)
initial <- c(initial, tmp)
}
##############
transition <-  matrix(0, lenght_train_letter, lenght_train_letter)
for (i in 1:(length(temp_file)-1)){
if( (grepl(temp_file[i], train_letters, fixed = TRUE)) && (grepl(temp_file[i+1], train_letters, fixed = TRUE)) ){
letter_i0_index <- unlist(gregexpr(pattern =temp_file[i], train_letters))
letter_i1_index <- unlist(gregexpr(pattern =temp_file[i+1],train_letters))
transition[letter_i0_index, letter_i1_index] <- transition[letter_i0_index, letter_i1_index] + 1
}
}
##############
rows_sum <- rowSums(transition)
for (i in 1:lenght_train_letter){
for (j in 1:lenght_train_letter){
transition[i, j] <- (transition[i, j] + 1) / (rows_sum[i] + 2)
}
}
# Transition and Initial are final output in this file
train_letters <- load_train_letter('HMM/train_LI.png')
test_letters <- load_test_letter('HMM/test-6-0.png')
noise <- 0.4
train_char_numbers <- length(train_letters)
test_char_numbers <- length(test_letters)
emissions <- matrix(0, train_char_numbers, test_char_numbers)
train_letters_string <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
train_letters_split <- strsplit(train_letters_string, "")[[1]]
counter <- 0
for (letter in train_letters_split){
for (test_char_index in 1:test_char_numbers){
tmp_train <- as.matrix(train_letters[letter])
tmp_train <- tmp_train[[1]]
if ( (dim(tmp_train)[2]) > 14 ){tmp_train <- tmp_train[, -15]}
dim(tmp_train) <- c(25, 14)
train_char_value <- tmp_train
tmp_observation <- test_letters[test_char_index]
tmp_observation <- tmp_observation[[1]]
if ( (dim(tmp_observation)[2]) > 14 ){tmp_observation <- tmp_observation[, -15]}
dim(tmp_observation) <- c(25, 14)
observation <- tmp_observation
missmatch <- 0
match <- 0
for (row in 1:25){
for (column in 1:14){
if (train_char_value[row, column] == observation[row, column]){
match <- match + 1
} else {missmatch <- missmatch + 1}
}
}
emissions[(unlist(gregexpr(pattern =letter, train_letters_string))), test_char_index] <- (`^`(1-noise,match)) * (`^`(noise,missmatch))
}
}
library(imager)
char_width <- 14
char_height <- 25
train_letters <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
load_train_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
names(result) <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j",
"k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3",
"4","5","6","7","8","9", " ")
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_train_letter('HMM/courier-train.png')
#result[69]
load_test_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_test_letter('HMM/test-1-0.png')
#result
library(readr)
fileName <- "HMM/12345.txt"
lines <- readLines(paste(fileName, sep = ""))
temp_file = rep()
temp_word = rep()
for (line in lines) {
line_words <- strsplit(line, split=" ")
for (word in line_words){
temp_word <- c(temp_word, word)
}
line_letter <- strsplit(line, split="")
for (letter in line_letter){
temp_file <- c(temp_file, letter)
}
}
##############
lenght_train_letter <- nchar(train_letters)
temp_init <- rep(0, lenght_train_letter)
for (i in 1:lenght_train_letter){
for (word in temp_word){
if ( substring(train_letters, i, i) == substring(word, 1, 1)){temp_init[i] = temp_init[i] + 1}
}
}
##############
initial <- rep()
for (i in temp_init){
tmp <- (i+1) / (length(temp_word) + 2)
initial <- c(initial, tmp)
}
##############
transition <-  matrix(0, lenght_train_letter, lenght_train_letter)
for (i in 1:(length(temp_file)-1)){
if( (grepl(temp_file[i], train_letters, fixed = TRUE)) && (grepl(temp_file[i+1], train_letters, fixed = TRUE)) ){
letter_i0_index <- unlist(gregexpr(pattern =temp_file[i], train_letters))
letter_i1_index <- unlist(gregexpr(pattern =temp_file[i+1],train_letters))
transition[letter_i0_index, letter_i1_index] <- transition[letter_i0_index, letter_i1_index] + 1
}
}
##############
rows_sum <- rowSums(transition)
for (i in 1:lenght_train_letter){
for (j in 1:lenght_train_letter){
transition[i, j] <- (transition[i, j] + 1) / (rows_sum[i] + 2)
}
}
# Transition and Initial are final output in this file
train_letters <- load_train_letter('HMM/train_LI.jpg')
test_letters <- load_test_letter('HMM/test-6-0.png')
noise <- 0.4
train_char_numbers <- length(train_letters)
test_char_numbers <- length(test_letters)
emissions <- matrix(0, train_char_numbers, test_char_numbers)
train_letters_string <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
train_letters_split <- strsplit(train_letters_string, "")[[1]]
counter <- 0
for (letter in train_letters_split){
for (test_char_index in 1:test_char_numbers){
tmp_train <- as.matrix(train_letters[letter])
tmp_train <- tmp_train[[1]]
if ( (dim(tmp_train)[2]) > 14 ){tmp_train <- tmp_train[, -15]}
dim(tmp_train) <- c(25, 14)
train_char_value <- tmp_train
tmp_observation <- test_letters[test_char_index]
tmp_observation <- tmp_observation[[1]]
if ( (dim(tmp_observation)[2]) > 14 ){tmp_observation <- tmp_observation[, -15]}
dim(tmp_observation) <- c(25, 14)
observation <- tmp_observation
missmatch <- 0
match <- 0
for (row in 1:25){
for (column in 1:14){
if (train_char_value[row, column] == observation[row, column]){
match <- match + 1
} else {missmatch <- missmatch + 1}
}
}
emissions[(unlist(gregexpr(pattern =letter, train_letters_string))), test_char_index] <- (`^`(1-noise,match)) * (`^`(noise,missmatch))
}
}
train_letters <- load_train_letter('HMM/train_LI.jpg')
library(imager)
char_width <- 14
char_height <- 25
train_letters <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
load_train_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
names(result) <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j",
"k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3",
"4","5","6","7","8","9")
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_train_letter('HMM/courier-train.png')
#result[69]
load_test_letter <- function(img_name){
img <- load.image(img_name)
img_width <-  width(img)
img_height <- height(img)
len_result <- floor(img_width / char_width)
result <- vector(mode="list", length=len_result)
img <- t(as.matrix(img))
j = 1
for (i in seq(0, img_width-14, by=char_width)){
result[j] <- list(img[,i:(i+14)])
j = j+1
}
return(result)
}
#result <- load_test_letter('HMM/test-1-0.png')
#result
library(readr)
fileName <- "HMM/12345.txt"
lines <- readLines(paste(fileName, sep = ""))
temp_file = rep()
temp_word = rep()
for (line in lines) {
line_words <- strsplit(line, split=" ")
for (word in line_words){
temp_word <- c(temp_word, word)
}
line_letter <- strsplit(line, split="")
for (letter in line_letter){
temp_file <- c(temp_file, letter)
}
}
##############
lenght_train_letter <- nchar(train_letters)
temp_init <- rep(0, lenght_train_letter)
for (i in 1:lenght_train_letter){
for (word in temp_word){
if ( substring(train_letters, i, i) == substring(word, 1, 1)){temp_init[i] = temp_init[i] + 1}
}
}
##############
initial <- rep()
for (i in temp_init){
tmp <- (i+1) / (length(temp_word) + 2)
initial <- c(initial, tmp)
}
##############
transition <-  matrix(0, lenght_train_letter, lenght_train_letter)
for (i in 1:(length(temp_file)-1)){
if( (grepl(temp_file[i], train_letters, fixed = TRUE)) && (grepl(temp_file[i+1], train_letters, fixed = TRUE)) ){
letter_i0_index <- unlist(gregexpr(pattern =temp_file[i], train_letters))
letter_i1_index <- unlist(gregexpr(pattern =temp_file[i+1],train_letters))
transition[letter_i0_index, letter_i1_index] <- transition[letter_i0_index, letter_i1_index] + 1
}
}
##############
rows_sum <- rowSums(transition)
for (i in 1:lenght_train_letter){
for (j in 1:lenght_train_letter){
transition[i, j] <- (transition[i, j] + 1) / (rows_sum[i] + 2)
}
}
# Transition and Initial are final output in this file
train_letters <- load_train_letter('HMM/courier-train.png')
test_letters <- load_test_letter('HMM/test-7-0.png')
noise <- 0.4
train_char_numbers <- length(train_letters)
test_char_numbers <- length(test_letters)
emissions <- matrix(0, train_char_numbers, test_char_numbers)
train_letters_string <- "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
train_letters_split <- strsplit(train_letters_string, "")[[1]]
counter <- 0
for (letter in train_letters_split){
for (test_char_index in 1:test_char_numbers){
tmp_train <- as.matrix(train_letters[letter])
tmp_train <- tmp_train[[1]]
if ( (dim(tmp_train)[2]) > 14 ){tmp_train <- tmp_train[, -15]}
dim(tmp_train) <- c(25, 14)
train_char_value <- tmp_train
tmp_observation <- test_letters[test_char_index]
tmp_observation <- tmp_observation[[1]]
if ( (dim(tmp_observation)[2]) > 14 ){tmp_observation <- tmp_observation[, -15]}
dim(tmp_observation) <- c(25, 14)
observation <- tmp_observation
missmatch <- 0
match <- 0
for (row in 1:25){
for (column in 1:14){
if (train_char_value[row, column] == observation[row, column]){
match <- match + 1
} else {missmatch <- missmatch + 1}
}
}
emissions[(unlist(gregexpr(pattern =letter, train_letters_string))), test_char_index] <- (`^`(1-noise,match)) * (`^`(noise,missmatch))
}
}
library(ramify)
init <- initial
emis <- emissions
obs <- test_letters
row <- lenght_train_letter
cols <- length(obs)
print(cols)
y = rep(0, cols)
temp_results <- matrix(0, row, cols)
for (i in 0:cols){
for (j in 0:row){
temp_results[j, i] = emis[j, i]
}
}
y = argmax(temp_results, rows = F)
final_result <- c()
for (i in y){
final_result <- paste(final_result, substring(train_letters_string, i, i))
}
print(final_result)
